#include <TinyGPS++.h>
#include <Servo.h>
#include <Adafruit_BMP085.h>

float R = 6371000;  //in meters
float lat1;
float lon1;
float lat2;
float lon2;
float lat1rad;
float lon1rad;
float lat2rad;
float lon2rad;
float deltalatrad;
float deltalonrad;
float alt1;
float alt1gps;
float alt2;
float a;
float c;
float d;
float x;
float y;
float z;
float theta;
float bearing = 0;
float elevangle = 0;
int yaw_servo_bearing = 90;
int pitch_servo_elevangle = 90;
float this_altitude;
float destination_altitude;
float altitude_offset = 7.4555;
float average_height_diff = 0;
float yaw_range = 255.5;
float between_yaw_range_and_360 = 360 - ((360 - yaw_range) / 2);
float pitch_range = 180;
float between_pitch_range_and_360 = 360 - ((360 - pitch_range) / 2);
// float altitude_calibration_term = 34.34625;
float altitude_calibration_term = 24.19677;  //calced using the recorded data


float elevangle_offset;
float bearing_offset;

String dataReceivedString = "";
String incomingMessage = "";  // To hold incoming data
bool messageStarted = false;
String this_coords_bearing_elevangle_servos;
bool newData = false;
bool gps_msg_complete = 0;
Adafruit_BMP085 bmp;
TinyGPSPlus this_gps;  //gps object
Servo yaw_servo;
Servo pitch_servo;

bool manualmode = false;               //bool to track if it is manual or auto mode
int mobile_manual_current_yaw = 50;    //send these to other node
int mobile_manual_current_pitch = 50;  //send to other node when correct triggers happen

float other_lat_long_alt[3];  // float array holding values of lat long alt of other node
String receivedData = "";     //received data buffer for bluetooth module

void setup() {
  yaw_servo.attach(9);
  pitch_servo.attach(10);
  bmp.begin();
  Serial.begin(9600);   //for usb pc connection
  Serial3.begin(9600);  //for gps
  Serial1.begin(9600);  //for bluetooth module
}

void loop() {
  getDataBT();
  //must happen in both auto and manual mode
  if (!manualmode) {  //do if auto tracking mode
    ReadGPS();
    SendCoords();
    GetValuesForAutoFromBT();
  } else if (manualmode) {  //do if manual control mode
    // GetServoValuesFromBT();
  }

  // printDebugInfo();
}
// void GetServoValuesFromBT() {
//   if (newData == true) {  //do only when new radio message received
//     // Serial.print("Char array received: ");
//     // Serial.println(dataReceived);
//     int startIndex = 0;
//     int endIndex = dataReceivedString.indexOf(",");
//     for (int i = 0; i < 2; i++) {
//       String valueString = dataReceivedString.substring(startIndex, endIndex);
//       other_lat_long_alt[i] = valueString.toFloat();
//       // Serial.println(i);
//       // Serial.println(other_lat_long_alt[i]);
//       startIndex = endIndex + 1;
//       endIndex = dataReceivedString.indexOf(",", startIndex);
//       if (endIndex == -1) {
//         endIndex = dataReceivedString.length();
//       }
//     }
//     // other_lat_long_alt[2] = bmp.readAltitude() + altitude_offset; // this must not be here, must be in section where local gps and alt values are read.
//     newData = false;  // must be at the end of this function, so that things inside function only happen once per RF message received.
//   }
// }

void CalibrateAltitudeUsingGPSInfo() {
  average_height_diff = 0;  //instantiate to zero for calcs
  int x = 15;               //number of alt measurements to take
  for (int i = 0; i < x; i++) {
    while (!gps_msg_complete) {
      wait_til_gps_is_read();
      delay(5);
    }
    Serial.println(i);
    alt1gps = this_gps.altitude.meters();
    alt1 = bmp.readAltitude();
    Serial.println("alt1gps: " + String(alt1gps) + " alt1bmp: " + String(alt1));
    average_height_diff += alt1gps - alt1;
    Serial.println(average_height_diff);
    gps_msg_complete = false;
  }
  average_height_diff = average_height_diff / x;  //
  Serial.println("avg height diff: " + String(average_height_diff));
  altitude_calibration_term = average_height_diff;
  // Serial.println("sending alt cal term to ground unit");
  // Serial1.println(altitude_calibration_term);  // send back to Node 1,
}

void ReadGPS() {
  while (Serial3.available() > 0) {
    // Parse GPS messages
    // Serial.println("reading from gps...");
    this_gps.encode(Serial3.read());
  }
  // Serial.println(this_gps.location.lat());
  if (this_gps.altitude.isUpdated()) {
    Serial.println(this_gps.altitude.meters());
    gps_msg_complete = true;
    this_coords_bearing_elevangle_servos = "<" + String(this_gps.location.lat(), 6) + "," + 
    String(this_gps.location.lng(), 6) + "," + String(bmp.readAltitude() + altitude_calibration_term, 2) + "," + 
    String(bearing, 2) + "," + String(elevangle, 2) + ","+ String(yaw_servo_bearing) + "," + String(pitch_servo_elevangle)  + ">";
    Serial.println("this coords: " + String(this_coords_bearing_elevangle_servos));
  }

  // Serial.println(gps_msg_complete);
}

void wait_til_gps_is_read() {
  while (Serial3.available()) {  //makes it wait here until new gps message comes in
    this_gps.encode(Serial3.read());
  }
  if (this_gps.altitude.isUpdated()) {
    gps_msg_complete = true;
  }
}

void SendCoords() {
  if (newData) {
    Serial1.println(this_coords_bearing_elevangle_servos);  // send to other tracker only if gps message done
  }
}

void getDataBT() {
  while (Serial1.available()) {
    char c = Serial1.read();  // Read each character from serial

    // Start of a new message
    if (c == '<') {

      messageStarted = true;
      incomingMessage = "";  // Clear any previous data
    }
    // End of the message
    else if (c == '>' && messageStarted) {
      messageStarted = false;
      // Serial.println("other gps coords" + String(incomingMessage));  // Process the complete message
      dataReceivedString = incomingMessage;  //assign local buffer value to global variable value to take the value out
      // Serial.println(dataReceivedString);
      newData = true;
      Serial.println("other gps coords: " + String(incomingMessage));
      if (incomingMessage == "a") {
        // Serial.println("received a from the other tracker");
        manualmode = false;
        // Serial.println("AUTO MODE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
      }
      //
      else if (incomingMessage == "m") {
        manualmode = true;
        // Serial.println("MANUAL MODE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
      }
      //
      else if (incomingMessage == "cal") {
        CalibrateAltitudeUsingGPSInfo();
      }
      //
      else if (incomingMessage == "y2") {           //respond to request for yaw2 value by sending it
        Serial.println(mobile_manual_current_yaw);  //view on serial port on pc
        Serial1.println(mobile_manual_current_yaw);
      }
      //
      else if (incomingMessage == "p2") {
        Serial.println(mobile_manual_current_pitch);
        Serial1.println(mobile_manual_current_pitch);
      }
      //
      else if (incomingMessage == "y2+") {
        if (mobile_manual_current_yaw < 100) {
          mobile_manual_current_yaw++;
        }
        yaw_servo.write(map(mobile_manual_current_yaw, 0, 100, 0, 180));
        Serial.println(mobile_manual_current_yaw);
      }
      //
      else if (incomingMessage == "y2-") {
        if (mobile_manual_current_yaw > 0) {
          mobile_manual_current_yaw--;
        }
        yaw_servo.write(map(mobile_manual_current_yaw, 0, 100, 0, 180));
        Serial.println(mobile_manual_current_yaw);
      }
      //
      else if (incomingMessage == "p2+") {
        if (mobile_manual_current_pitch < 100) {
          mobile_manual_current_pitch++;
        }
        pitch_servo.write(map(mobile_manual_current_pitch, 0, 100, 0, 180));
        Serial.println(mobile_manual_current_pitch);
      }  //
         //
      else if (incomingMessage == "p2-") {
        if (mobile_manual_current_pitch > 0) {
          mobile_manual_current_pitch--;
        }
        pitch_servo.write(map(mobile_manual_current_pitch, 0, 100, 0, 180));
        Serial.println(mobile_manual_current_pitch);
      }
    }
    // Append to message if it's within start and end
    else if (messageStarted) {
      incomingMessage += c;
    }
  }
}
void GetValuesForAutoFromBT() {
  if (newData == true) {  //do only when new radio message received
    // Serial.print("Char array received: ");
    // Serial.println(dataReceived);
    int startIndex = 0;
    int endIndex = dataReceivedString.indexOf(",");
    for (int i = 0; i < 3; i++) {
      String valueString = dataReceivedString.substring(startIndex, endIndex);
      other_lat_long_alt[i] = valueString.toFloat();
      // Serial.println(i);
      // Serial.println(other_lat_long_alt[i]);
      startIndex = endIndex + 1;
      endIndex = dataReceivedString.indexOf(",", startIndex);
      if (endIndex == -1) {
        endIndex = dataReceivedString.length();
      }
    }
    // other_lat_long_alt[2] = bmp.readAltitude() + altitude_offset; // this must not be here, must be in section where local gps and alt values are read.
    BearingElevangleServos();
    newData = false;  // must be at the end of this function, so that things inside function only happen once per RF message received.
  }
}

void BearingElevangleServos() {
  lat1 = this_gps.location.lat() * PI / 180;              //this lat
  lon1 = this_gps.location.lng() * PI / 180;              //this lon
  alt1 = bmp.readAltitude() + altitude_calibration_term;  // this altitude, still must do calibration
  lat2 = other_lat_long_alt[0] * PI / 180;
  lon2 = other_lat_long_alt[1] * PI / 180;
  // alt2 = other_lat_long_alt[2];
  // Serial.println("alt2 before adding calibration term: " + String(alt2));
  alt2 = other_lat_long_alt[2] + average_height_diff;  //add calibration term
  // Serial.println("alt2 after adding calibration term: " + String(alt2));
  // Serial.println(String("lat1: ") + String(lat1, 10) + ", lon1: " + String(lon1, 10) + ", alt1: " + String(alt1, 10) + ", lat2: " + String(lat2, 10) + ", lon2: " + String(lon2, 10) + ", alt2: " + String(alt2, 10));

  // bearing calc
  y = sin(lon2 - lon1) * cos(lat2);
  x = cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(lon2 - lon1);
  theta = atan2(y, x);
  bearing = fmod((theta * 180 / PI + 360), 360);

  Serial.println("Bearing before reduction: " + String(bearing));
  if (bearing >= yaw_range && bearing < between_yaw_range_and_360) {
    bearing = yaw_range;
  } else if (bearing >= between_yaw_range_and_360) {
    bearing = 0;
  }
  Serial.println("bearing after reduction " + String(bearing));

  deltalatrad = (lat2 - lat1);
  deltalonrad = (lon2 - lon1);

  a = sin(deltalatrad / 2) * sin(deltalatrad / 2) + cos(lat1) * cos(lat2) * sin(deltalonrad / 2) * sin(deltalonrad / 2);
  // Serial.print("a: ");
  // Serial.println(a, 12);
  c = 2 * atan2(sqrt(a), sqrt(1 - a));
  // Serial.print("c: ");
  // Serial.println(c, 12);
  d = R * c;  //
  Serial.print("d: ");
  Serial.println(d, 12);

  elevangle = atan2((alt2 - alt1), d) * 180 / PI + 90;  // delta altitude is opposite, d is adjacent
  // if (elevangle > 90) {
  //   elevangle = 90;
  // } else if (elevangle < -90) {
  //   elevangle = -90;
  // }
  // elevangle += 90;  //add 90 degrees to take it from (-90, 90) to (0, 180);
  // elevangle = 90;   //COMMENT OUT WHEN DONE TESTING!

  Serial.print("Elevangle: ");
  Serial.println(elevangle);

  yaw_servo_bearing = map(bearing, 0, yaw_range, 180, 0);
  // Serial.print("scaled bearing to servo 0 to 180: ");
  // Serial.println(yaw_servo_bearing);

  pitch_servo_elevangle = map(elevangle, 0, pitch_range, 0, 180);
  Serial.print("pitch servo elevangle scaled to 0 to 180: ");
  Serial.println(pitch_servo_elevangle);
  pitch_servo.write(pitch_servo_elevangle);
  yaw_servo.write(yaw_servo_bearing);
  mobile_manual_current_pitch = map(pitch_servo_elevangle, 0, 180, 0, 100);  //save values of pitch for manual mode, into number between 0 and 100
  mobile_manual_current_yaw = map(yaw_servo_bearing, 0, 180, 0, 100);        //save values of pitch for manual mode into number between 0 and 100
  // yaw_servo.write(45);
}
